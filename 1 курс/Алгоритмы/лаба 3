#include <iostream>
#include <iomanip>
#include <vector>
#include <queue>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

static int input_check(string message, int min, int max) {
    int input;
    while (true) {
        cout << message;
        cin >> input;

        if (cin.fail() || input < min || input > max) {
            cin.clear();
            cin.ignore(INT_MAX, '\n');
            cout << "Ошибка ввода! Пожалуйста, введите число от " << min << " до " << max << "." << endl;
        }
        else {
            return input;
        }
    }
}

// Задание 1
struct Path {
    int x, y, min;
    bool operator>(const Path& other) const {
        return min > other.min;
    }
};
static void printMatrix(const vector<vector<int>>& matrix) {
    cout << "Матрица высот:\n";
    for (const auto& row : matrix) {
        for (int val : row) {
            cout << setw(4) << left << val;
        }
        cout << endl;
    }
}
// Восстановление пути
static vector<vector<int>> reconstructPath(vector<vector<vector<int>>>& parents, int start[], int goal[], int totalMin) {
    vector<vector<int>> path;
    int current[2] = { goal[0], goal[1] };

    while (current[0] != start[0] || current[1] != start[1]) {
        path.push_back({ current[0], current[1] });
        int prev[2] = { parents[current[0]][current[1]][0], parents[current[0]][current[1]][1] };
        current[0] = prev[0];
        current[1] = prev[1];
    }

    path.push_back({ start[0], start[1] });
    reverse(path.begin(), path.end());

    cout << "Минимальная длина пути: " << totalMin << endl;

    return path;
}
// Поиск минимального пути
static vector<vector<int>> searchPath(vector<vector<int>>& matrix, int start[], int goal[]) {
    int n = matrix.size();
    priority_queue<Path, vector<Path>, greater<Path>> pq;
    vector<vector<int>> Long(n, vector<int>(n, INT_MAX));
    vector<vector<vector<int>>> parents(n, vector<vector<int>>(n, vector<int>(2, -1)));

    pq.push({ start[0], start[1], 0 });
    Long[start[0]][start[1]] = 0;

    int directions[4][2] = { {0, 1}, {1, 0}, {0, -1}, {-1, 0} };

    while (!pq.empty()) {
        Path current = pq.top();
        pq.pop();
        
        if (current.x == goal[0] && current.y == goal[1]) {
            return reconstructPath(parents, start, goal, current.min);
        }

        for (auto dir : directions) {
            int nx = current.x + dir[0], ny = current.y + dir[1];

            if (nx >= 0 && ny >= 0 && nx < n && ny < n) {
                int newMin = current.min + abs(matrix[nx][ny] - matrix[current.x][current.y]) + 1;

                if (newMin < Long[nx][ny]) {
                    Long[nx][ny] = newMin;
                    pq.push({ nx, ny, newMin });
                    parents[nx][ny][0] = current.x;
                    parents[nx][ny][1] = current.y;
                }
            }
        }
    }
    return {};
}
static void task1() {
    srand(time(0));

    int n;
    cout << "Введите размер матрицы: ";
    cin >> n;

    // Автоматическое заполнение матрицы случайными числами от 1 до 100
    vector<vector<int>> map(n, vector<int>(n));
    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++)
            map[i][j] = rand() % 100 + 1;

    printMatrix(map);

    int start[2]{}, final[2]{};
    cout << "Введите координаты начала (x y): ";
    cin >> start[0] >> start[1];
    start[0]--;
    start[1]--;

    cout << "Введите координаты цели (x y): ";
    cin >> final[0] >> final[1];
    final[0]--;
    final[1]--;

    vector<vector<int>> path = searchPath(map, start, final);

    if (!path.empty()) {
        cout << "Путь:\n";
        for (auto& pos : path) {
            cout << "[" << pos[0] + 1 << "][" << pos[1] + 1 << "] -> ";
        }
        cout << "Цель\n";
    }
    else {
        cout << "Путь не найден.\n";
    }
}

// Задание 2
// Генерация случайного массива
static vector<int> generateRandomArray(int n, int start_range, int end_range) {
    vector<int> arr(n);
    for (int i = 0; i < n; i++) {
        arr[i] = start_range + rand() % (end_range - start_range + 1);
    }
    return arr;
}
// Вывод массива
static void printArray(const vector<int>& arr, const string& message) {
    cout << message << ": ";
    for (int num : arr) {
        cout << num << " ";
    }
    cout << endl;
}
// Нахождение наибольшей строго возрастающей подпоследовательности
static vector<int> findLIS(const vector<int>& arr) {
    int n = arr.size();
    if (n == 0) return {};

    vector<int> dp(n, 1), prev(n, -1);
    int max_length = 0, last_index = -1;

    for (int i = 0; i < n; i++) {
        for (int j = 0; j < i; j++) {
            if (arr[j] < arr[i] && dp[i] < dp[j] + 1) {
                dp[i] = dp[j] + 1;
                prev[i] = j;
            }
        }
        if (dp[i] > max_length) {
            max_length = dp[i];
            last_index = i;
        }
    }
    // преобразование для вывода
    vector<int> lis;
    while (last_index != -1) {
        lis.push_back(arr[last_index]);
        last_index = prev[last_index];
    }
    reverse(lis.begin(), lis.end());

    return lis;
}
// Нахождение возрастающей подпоследовательности с разрывами
static vector<int> findLISWithGaps(const vector<int>& arr, int m) {
    int n = arr.size();
    if (n == 0) return {};

    // dp[i][k] — длина LIS, заканчивающаяся на индексе i с k разрывами
    vector<vector<int>> dp(n, vector<int>(m + 1, 1));
    vector<vector<int>> prev(n, vector<int>(m + 1, -1));
    vector<vector<bool>> used_gap(n, vector<bool>(m + 1, false));
    int max_length = 0, last_index = -1, gaps_used = 0;

    for (int i = 0; i < n; i++) {
        for (int k = 0; k <= m; k++) {
            for (int j = 0; j < i; j++) {
                // без разрыва
                if (arr[j] < arr[i]) {
                    if (dp[i][k] < dp[j][k] + 1) {
                        dp[i][k] = dp[j][k] + 1;
                        prev[i][k] = j;
                        used_gap[i][k] = false;
                    }
                }
                // с разрывом
                if (k > 0) {
                    if (dp[i][k] < dp[j][k - 1] + 1) {
                        dp[i][k] = dp[j][k - 1] + 1;
                        prev[i][k] = j;
                        used_gap[i][k] = true;
                    }
                }
            }
            if (dp[i][k] > max_length) {
                max_length = dp[i][k];
                last_index = i;
                gaps_used = k;
            }
        }
    }

    // Восстановление последовательности
    vector<int> lis;
    int curr = last_index, curr_gaps = gaps_used;
    while (curr != -1) {
        lis.push_back(arr[curr]);
        int next = prev[curr][curr_gaps];
        if (next != -1 && used_gap[curr][curr_gaps]) {
            curr_gaps--;
        }
        curr = next;
    }
    reverse(lis.begin(), lis.end());

    return lis;
}
// Задание 2а
static void task2a() {
    srand(time(0));

    int n, start_range, end_range;
    cout << "Введите количество элементов массива: ";
    cin >> n;
    cout << "Введите начало диапазона: ";
    cin >> start_range;
    cout << "Введите конец диапазона: ";
    cin >> end_range;

    vector<int> arr = generateRandomArray(n, start_range, end_range);
    printArray(arr, "Сгенерированный массив");

    vector<int> lis = findLIS(arr);
    printArray(lis, "Наибольшая строго возрастающая подпоследовательность");

    cout << "Минимальное количество вычеркнутых элементов: " << (n - lis.size()) << endl;
}
// Задание 2б
static void task2b() {
    srand(time(0));

    int n, start_range, end_range;
    cout << "Введите количество элементов массива: ";
    cin >> n;
    cout << "Введите начало диапазона: ";
    cin >> start_range;
    cout << "Введите конец диапазона: ";
    cin >> end_range;

    vector<int> arr = generateRandomArray(n, start_range, end_range);
    printArray(arr, "Сгенерированный массив");

    vector<int> lis = findLISWithGaps(arr, 1);
    printArray(lis, "Наибольшая строго возрастающая подпоследовательность (с одним разрывом)");

    cout << "Минимальное количество вычеркнутых элементов: " << (n - lis.size()) << endl;
}
// Задание 2в
static void task2v() {
    srand(time(0));

    int n, start_range, end_range, m;
    cout << "Введите количество элементов массива: ";
    cin >> n;
    cout << "Введите начало диапазона: ";
    cin >> start_range;
    cout << "Введите конец диапазона: ";
    cin >> end_range;
    cout << "Введите количество допустимых разрывов (m): ";
    cin >> m;

    vector<int> arr = generateRandomArray(n, start_range, end_range);
    printArray(arr, "Сгенерированный массив");

    vector<int> lis = findLISWithGaps(arr, m);
    printArray(lis, "Наибольшая строго возрастающая подпоследовательность (с разрывами)");

    cout << "Минимальное количество вычеркнутых элементов: " << (n - lis.size()) << endl;
}

int main() {
    setlocale(LC_ALL, "RU");

    while (true) {
        cout << "   Задачи: \n";
        cout << "1. (№7) Найти маршрут и минимальное расстояние пути. \n";
        cout << "2. (№22а) Вычеркнуть минимальное кол-во элементов из массива для сохранения строго возрастающей последовательности. \n";
        cout << "3. (№22б) Вычеркнуть минимальное кол-во элементов с 'разрывом'. \n";
        cout << "4. (№22в) Вычеркнуть минимальное кол-во элементов с m кол-вом 'разрывов'.\n";
        cout << "0. Выход из программы. \n\n";

        int n = input_check("Введите номер задачи: ", 0, 4);

        switch (n) {
        case 0:
            cout << "Завершение программы." << endl;
            return 0;
        case 1:
            task1();
            break;
        case 2:
            task2a();
            break;
        case 3:
            task2b();
            break;
        case 4:
            task2v();
            break;
        }
    }
    return 0;
}
