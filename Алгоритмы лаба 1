#include <iostream>
#include <vector>
#include <string>

using namespace std;

// Ввод матрицы пользователем
vector<vector<int>> inputMatrix(int m, int n) {
    vector<vector<int>> matrix(m, vector<int>(n));

    for (int i = 0; i < m; i++) {
        for (int j = 0; j < n; j++) {
            cout << "Введите A" << i + 1 << j + 1 << ": ";
            cin >> matrix[i][j];
        }
    }

    return matrix;
}

// Функция для вычисления объема воды
int calculateWaterVolume(const vector<vector<int>>& heightMap) {
    int m = heightMap.size(); // количество строк
    int n = heightMap[0].size(); // количество столбцов

    if (m < 3 || n < 3) {
        return 0;
    }

    int minPerimeter = INT_MAX;

    for (int j = 1; j < n - 1; j++) {
        minPerimeter = min(minPerimeter, heightMap[0][j]);
        minPerimeter = min(minPerimeter, heightMap[m - 1][j]);
    }

    for (int i = 1; i < m - 1; ++i) {
        minPerimeter = min(minPerimeter, heightMap[i][0]);
        minPerimeter = min(minPerimeter, heightMap[i][n - 1]);
    }

    int totalVolume = 0;

    for (int i = 1; i < m - 1; ++i) {
        for (int j = 1; j < n - 1; ++j) {
            if (minPerimeter > heightMap[i][j]) {
                totalVolume += minPerimeter - heightMap[i][j];
            }
        }
    }

    return totalVolume;
}

// Функция для вычисления префикс-функции
vector<int> computePrefixFunction(const string& pattern) {
    int m = pattern.length();
    vector<int> pi(m);
    pi[0] = 0;
    int k = 0;
    for (int q = 1; q < m; q++) {
        while (k > 0 && pattern[k] != pattern[q]) {
            k = pi[k - 1];
        }
        if (pattern[k] == pattern[q]) {
            k++;
        }
        pi[q] = k;
    }
    return pi;
}

// Функция для поиска подстроки с использованием алгоритма КМП
int KMPSearch(const string& text, const string& pattern) {
    int n = text.length();
    int m = pattern.length();
    vector<int> pi = computePrefixFunction(pattern);
    int q = 0; // количество совпавших символов
    int operations = 0; // счетчик операций

    for (int i = 0; i < n; i++) {
        while (q > 0 && pattern[q] != text[i]) {
            q = pi[q - 1];
            operations++;
        }
        if (pattern[q] == text[i]) {
            q++;
        }
        if (q == m) {
            cout << "Шаблон найден на позиции " << i - m + 1 << endl;
            q = pi[q - 1];
        }
        operations++;
    }

    return operations;
}

// Функция для вычисления среднего арифметического
double calculateAverage(const vector<int>& numbers) {
    int sum = 0;
    for (int number : numbers) {
        sum += number;
    }
    return static_cast<double>(sum) / numbers.size();
}

int main() {
    setlocale(LC_ALL, "Russian");
    cout << "Номера задач: \n";
    cout << "Выход из программы - 0 \n";
    cout << "Задача №9 - 1 \n";
    cout << "Задача №26 - 2 \n";

    while (true) {
        short int n;
        cout << "Введите номер задачи: ";
        cin >> n;
        cin.ignore();

        switch (n) {
        case 0: {
            cout << "Завершение программы." << endl;
            return 0;
        }
        case 1: {
            int m, n;
            cout << "Введите количество строк (m): ";
            cin >> m;
            cout << "Введите количество столбцов (n): ";
            cin >> n;

            cout << "Введите матрицу " << m << "x" << n << ":" << endl;
            vector<vector<int>> heightMap = inputMatrix(m, n);

            int volume = calculateWaterVolume(heightMap);
            cout << "Объем воды во внутренних блоках: " << volume << endl;
            break;
        }
        case 2: {
            int seriesCount;
            cout << "Введите количество серий экспериментов: ";
            cin >> seriesCount;
            cin.ignore();

            vector<int> operationsCount;

            for (int i = 0; i < seriesCount; i++) {
                string text, pattern;
                cout << "Введите текст T: ";
                getline(cin, text);
                cout << "Введите шаблон P: ";
                getline(cin, pattern);

                int operations = KMPSearch(text, pattern);
                operationsCount.push_back(operations);
            }

            double averageOperations = calculateAverage(operationsCount);
            cout << "Среднее число операций: " << averageOperations << endl;
            break;
        }
        default: {
            cout << "Неверный номер задачи. Попробуйте снова." << endl;
            break;
        }
        }
    }

    return 0;
}
