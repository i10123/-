#include <iostream>
#include <vector>
#include <string>

using namespace std;

// Ввод матрицы пользователем
vector<vector<int>> inputMatrix(int m, int n) {
    vector<vector<int>> matrix(m, vector<int>(n));
    for (int i = 0; i < m; i++) {
        for (int j = 0; j < n; j++) {
            cout << "Введите A" << i + 1 << j + 1 << ": ";
            cin >> matrix[i][j];
        }
    }
    return matrix;
}
// Функция для вычисления объема воды #1
int calculateWaterVolume1(const vector<vector<int>>& heightMap) {
    int m = heightMap.size(); // количество строк
    int n = heightMap[0].size(); // количество столбцов

    if (m < 3 || n < 3) { // если кол-во строк или стобцов < 3, то объем оставшейся воды 0
        return 0;
    }

    int minPerimeter = INT_MAX; // реальное значение
    // нахождение минимальной высоты по горизонтали
    for (int j = 1; j < n - 1; j++) {
        minPerimeter = min(minPerimeter, heightMap[0][j]); // минимальная высота блоков сверху
        minPerimeter = min(minPerimeter, heightMap[m - 1][j]); // минимальная высота блоков снизу
    }
    // нахождение минимальной высоты по вертикали
    for (int i = 1; i < m - 1; i++) {
        minPerimeter = min(minPerimeter, heightMap[i][0]); // минимальная высота блоков слева
        minPerimeter = min(minPerimeter, heightMap[i][n - 1]); // минимальная высота блоков справа
    }

    int totalVolume = 0;
    // нахождение объема оставшейся воды
    for (int i = 1; i < m - 1; i++) {
        for (int j = 1; j < n - 1; j++) {
            if (minPerimeter > heightMap[i][j]) { // нахождение подходящих блоков
                totalVolume += minPerimeter - heightMap[i][j];
            }
        }
    }

    return totalVolume;
}

// Функция для вычисления объема воды #2
void calculateWaterVolume2(const vector<vector<int>>& heightMap, int x, int y, int V) {
    int m = heightMap.size();
    int n = heightMap[0].size();

    int totalVolume = calculateWaterVolume1(heightMap); // находим максимальный объем не вытекающей воды
    if (x == 1 || x == m || y == 1 || y == n) { 
        cout << "Объем воды: " << min(V / 2, totalVolume) << endl;
    }
    else if (V < totalVolume) {
        cout << "Объем воды: " << V << endl;
    }
    else {
        cout << "Объем воды: " << totalVolume << endl;
    }
}

// Функция для вычисления префикс-функции
vector<int> Prefix(const string& pattern) {
    int m = pattern.length();
    vector<int> p(m);
    p[0] = 0;
    int k = 0;
    for (int q = 1; q < m; q++) {
        if (pattern[k] == pattern[q]) {
            k++;
        }
        while (k > 0 && pattern[k] != pattern[q]) {
            k = p[k - 1];
        }
        p[q] = k;
    }
    return p;
}
// Функция для поиска подстроки с использованием алгоритма КМП
int KMP(const string& text, const string& pattern) {
    int n = text.length();
    int m = pattern.length();
    vector<int> p = Prefix(pattern);
    int q = 0; // количество совпавших символов
    int operations = 0; // счетчик операций

    for (int i = 0; i < n; i++) {
        while (q > 0 && pattern[q] != text[i]) { // Если символы не совпадают
            q = p[q - 1]; // Переход к следующей позиции
            operations++;
        }
        if (pattern[q] == text[i]) { // Проверка совпадения текущего символа
            q++;
        }
        if (q == m) { // Если все символы шаблона совпали
            cout << "Шаблон найден на позиции " << i - m + 2 << endl;
            q = p[q - 1]; // Сброс счетчика совпадений для поиска следующего возможного совпадения
        }
        operations++;
    }
    return operations;
}

int main() {
    setlocale(LC_ALL, "Russian");
    cout << "Номера задач: \n";
    cout << "Выход из программы - 0 \n";
    cout << "Задача №9 (часть 1) - 1 \n";
    cout << "Задача №9 (часть 2) - 2 \n";
    cout << "Задача №26 - 3 \n";

    while (true) {
        short int n;
        cout << "Введите номер задачи: ";
        cin >> n;
        cin.ignore();

        switch (n) {
        case 0: {
            cout << "Завершение программы." << endl;
            return 0;
        }
        case 1: {
            int m, n;
            cout << "Введите количество строк (m): ";
            cin >> m;
            cout << "Введите количество столбцов (n): ";
            cin >> n;

            cout << "Введите матрицу " << m << "x" << n << ":" << endl;
            vector<vector<int>> heightMap = inputMatrix(m, n);

            int volume = calculateWaterVolume1(heightMap);
            cout << "Объем воды в блоках: " << volume << endl;
            break;
        }
        case 2: {
            int m, n, x, y, V;
            cout << "Введите количество строк (m): ";
            cin >> m;
            cout << "Введите количество столбцов (n): ";
            cin >> n;

            cout << "Введите матрицу " << m << "x" << n << ":" << endl;
            vector<vector<int>> heightMap = inputMatrix(m, n);

            cout << "Введите номер строки (x): ";
            cin >> x;
            cout << "Введите номер столбца (y): ";
            cin >> y;
            cout << "Введите количество воды (V): ";
            cin >> V;

            calculateWaterVolume2(heightMap, x - 1, y - 1, V);
            break;
        }
        case 3: {
            int seriesCount;
            cout << "Введите количество серий экспериментов: ";
            cin >> seriesCount;
            cin.ignore();

            double totalOperations = 0;

            for (int i = 0; i < seriesCount; i++) {
                string text, pattern;
                cout << "Введите текст T: ";
                getline(cin, text);
                cout << "Введите шаблон P: ";
                getline(cin, pattern);

                int operations = KMP(text, pattern); // число операций
                totalOperations += operations;
            }

            double averageOperations = totalOperations / seriesCount;
            cout << "Среднее число операций: " << averageOperations << endl;
            break;
        }
        default: {
            cout << "Неверный номер задачи. Попробуйте снова." << endl;
            break;
        }
        }
    }

    return 0;
}
