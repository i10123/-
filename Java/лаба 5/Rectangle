public class Rectangle {
    private int x1, y1, x2, y2;

    public Rectangle() {
        this.x1 = 0; this.y1 = 0;
        this.x2 = 1; this.y2 = 1;
    }

    public Rectangle(int x1, int y1, int x2, int y2) {
        if (x1 == x2 || y1 == y2) {
            throw new IllegalArgumentException("Прямоугольник не может иметь нулевую ширину или высоту");
        }
        this.x1 = x1; this.y1 = y1;
        this.x2 = x2; this.y2 = y2;
    }

    // Сеттеры и геттеры
    public void setX1(int x1) { this.x1 = x1; }
    public void setY1(int y1) { this.y1 = y1; }
    public void setX2(int x2) { this.x2 = x2; }
    public void setY2(int y2) { this.y2 = y2; }

    public int getX1() { return x1; }
    public int getY1() { return y1; }
    public int getX2() { return x2; }
    public int getY2() { return y2; }

    // Метод: вычислить площадь
    public int getArea() {
        return Math.abs((x2 - x1) * (y2 - y1));
    }

    // Метод: поворот на 90° по часовой стрелке
    public void rotate90() {
        int centerX = (x1 + x2) / 2;
        int centerY = (y1 + y2) / 2;

        int dx1 = x1 - centerX;
        int dy1 = y1 - centerY;
        int dx2 = x2 - centerX;
        int dy2 = y2 - centerY;

        x1 = centerX - dy1;
        y1 = centerY + dx1;
        x2 = centerX - dy2;
        y2 = centerY + dx2;
    }

    // equals
    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (!(obj instanceof Rectangle)) return false;
        Rectangle other = (Rectangle) obj;
        return x1 == other.x1 && y1 == other.y1 && x2 == other.x2 && y2 == other.y2;
    }

    // toString
    @Override
    public String toString() {
        return "Прямоугольник: (" + x1 + "," + y1 + ") до (" + x2 + "," + y2 + ")";
    }
}
