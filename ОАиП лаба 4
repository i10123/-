#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <sstream>
#include <iomanip>
#include <windows.h>
#include <locale>

using namespace std;

// обработчик ошибок, добавить проверку на правильный ввод(int вместо double)
static int input_check(const string& message, int min, int max) {
    int input;
    string tmp;
    while (true) {
        cout << message;
        cin >> input;

        if (cin.fail()) {
            cin.clear();
            getline(cin, tmp);
            cout << "Ошибка ввода! Пожалуйста, введите число от " << min << " до " << max << "." << endl;
        }
        else {
            if (input < min || input > max) {
                cout << "Ошибка ввода! Пожалуйста, введите число от " << min << " до " << max << "." << endl;
                getline(cin, tmp);
                continue;
            }
            getline(cin, tmp);
            return input;
        }
    }
}
static double input_check(string message, double min, double max) {
    double input;
    while (true) {
        cout << message;
        cin >> input;

        if (cin.fail() || input < min || input > max) {
            cin.clear();
            cin.ignore(INT_MAX, '\n');
            cout << "Ошибка ввода! Пожалуйста, введите число от " << min << " до " << max << "." << endl;
        }
        else {
            return input;
        }
    }
}
// проверка файла на существование и наличие данных
static bool checkFile(ifstream& file_in, const string& inputFile) {
    file_in.open(inputFile);

    if (!file_in.is_open()) {
        cout << "Ошибка: файл \"" << inputFile << "\" не найден." << endl << endl;
        return false;
    }

    if (file_in.peek() == EOF) {
        cout << "Файл \"" << inputFile << "\" пуст." << endl << endl;
        return false;
    }

    return true;
}

// Задание 1
void parityNumbers(const string& inputFile, const string& outputFile) {
    ifstream file_in;
    if (!checkFile(file_in, inputFile)) return;
    ofstream file_out(outputFile);
    vector<int> numbers;
    vector<int> chet, nechet;
    int num;

    // Чтение чисел из файла
    cout << "Данные из файла " << inputFile << ": ";
    while (file_in >> num) {
        numbers.push_back(num);
        cout << num << " ";
        if (num % 2 == 0) {
            chet.push_back(num);
        }
        else {
            nechet.push_back(num);
        }
    }
    cout << endl;
    file_in.close();

    // Формирование правильного порядка с чередованием
    vector<int> result;
    size_t chetIndex = 0, nechetIndex = 0;
    bool flagChet = !numbers.empty() && numbers[0] % 2 == 0; // Четность первого элемента

    while (chetIndex < chet.size() || nechetIndex < nechet.size()) {
        if (flagChet && chetIndex < chet.size()) {
            result.push_back(chet[chetIndex++]);
            flagChet = false;
        }
        else if (!flagChet && nechetIndex < nechet.size()) {
            result.push_back(nechet[nechetIndex++]);
            flagChet = true;
        }
        else if (chetIndex < chet.size()) {
            result.push_back(chet[chetIndex++]);
        }
        else if (nechetIndex < nechet.size()) {
            result.push_back(nechet[nechetIndex++]);
        }
    }

    // Запись результата в файл
    for (int r : result) {
        file_out << r << " ";
    }
    file_out.close();

    // Вывод содержимого результирующего файла
    cout << "Файл " << outputFile << " создан.\nСодержимое файла: ";
    ifstream checkFile(outputFile);
    int res;
    while (checkFile >> res) {
        cout << res << " ";
    }
    checkFile.close();
    cout << endl << endl;
}

// Задание 2
struct Student {
    string fio = "";              // ФИО
    int age = 0;                 // возраст
    string gender = "";         // пол
    int course = 0;            // курс
    double performance = 0.0; // успеваемость (общая средняя оценка)
};
// Создание пустого файла (если он не существует)
static void createFile(const string& filename) {
    ifstream checkFile(filename);
    if (checkFile) return;

    ofstream file(filename);
    if (!file) {
        cout << "Ошибка: не удалось создать файл!" << endl;
        return;
    }

    cout << "Файл \"" << filename << "\" успешно создан!" << endl;
}
// Просмотр содержимого файла в виде таблицы
void viewFile(const string& filename) {
    ifstream file(filename);
    if (!file) {
        cout << "Ошибка: файл \"" << filename << "\" не найден!" << endl;
        return;
    }

    cout << "\nСписок студентов:\n";
    cout << "-----------------------------------------------------------------------------------\n";
    cout << setw(40) << left << "ФИО"
        << setw(10) << left << "Возраст"
        << setw(10) << left << "Пол"
        << setw(10) << left << "Курс"
        << setw(10) << left << "Успеваемость\n";
    cout << "-----------------------------------------------------------------------------------\n";

    string line;
    while (getline(file, line)) {
        stringstream ss(line);
        Student student;
        getline(ss, student.fio, ',');
        ss >> student.age;
        ss.ignore();
        getline(ss, student.gender, ',');
        ss >> student.course;
        ss.ignore();
        ss >> student.performance;

        cout << setw(40) << left << student.fio
            << setw(10) << left << student.age
            << setw(10) << left << student.gender
            << setw(10) << left << student.course
            << setw(10) << fixed << setprecision(2) << student.performance
            << endl;
    }
    cout << endl;
}
// Добавление студента
void addStudent(const string& filename) {
    ofstream file(filename, ios::app);
    if (!file) {
        cout << "Ошибка: файл \"" << filename << "\" не найден!" << endl;
        return;
    }

    Student student;
    cout << "Введите ФИО: ";
    cin.ignore();
    getline(cin, student.fio);
    int n = input_check("Введите возраст: ", 17, 100);
    student.age = n;
    cout << "Введите пол (М/Ж): ";
    cin >> student.gender;
    n = input_check("Введите курс: ", 1, 6);
    student.course = n;
    double m = input_check("Введите средний балл: ", 0.0, 10.0);
    student.performance = m;

    file << student.fio << "," << student.age << "," << student.gender << ","
        << student.course << "," << student.performance << endl;

    cout << "Запись добавлена!\n";
}
// Удаление студента по ФИО
void deleteStudent(const string& filename) {
    ifstream file(filename);
    if (!file) {
        cout << "Ошибка: файл \"" << filename << "\" не найден!" << endl;
        return;
    }

    vector<Student> students;
    string nameToDelete;
    cout << "Введите ФИО студента для удаления: ";
    cin.ignore();
    getline(cin, nameToDelete);

    string line;
    bool check_fio = false;
    while (getline(file, line)) {
        stringstream ss(line);
        Student student;
        getline(ss, student.fio, ',');
        ss >> student.age;
        ss.ignore();
        getline(ss, student.gender, ',');
        ss >> student.course;
        ss.ignore();
        ss >> student.performance;

        if (student.fio != nameToDelete) {
            students.push_back(student);
        }
        else { check_fio = true; }
    }
    file.close();

    if (!check_fio) {
        cout << "Студент с ФИО \"" << nameToDelete << "\" не найден!\n\n";
        return;
    }

    ofstream outFile(filename);
    for (const Student& student : students) {
        outFile << student.fio << "," << student.age << "," << student.gender << ","
            << student.course << "," << student.performance << endl;
    }

    cout << "Студент \"" << nameToDelete << "\" удален!\n\n";
}
// Редактор данных студента
void redactStudent(const string& filename) {
    ifstream file(filename);
    if (!file) {
        cout << "Ошибка: файл \"" << filename << "\" не найден!" << endl;
        return;
    }

    vector<Student> students;
    string nameForRedact;
    cout << "Введите ФИО студента для корректировки: ";
    cin.ignore();
    getline(cin, nameForRedact);

    string line;
    bool check_fio = false;
    while (getline(file, line)) {
        stringstream ss(line);
        Student student;
        getline(ss, student.fio, ',');
        ss >> student.age;
        ss.ignore();
        getline(ss, student.gender, ',');
        ss >> student.course;
        ss.ignore();
        ss >> student.performance;

        if (student.fio == nameForRedact) {
            check_fio = true;
            cout << "Введите новые данные для студента \"" << student.fio << "\":\n";
            int n = input_check("Возраст: ", 17, 100);
            student.age = n;
            cout << "Пол (М/Ж): ";
            cin >> student.gender;
            n = input_check("Курс: ", 1, 6);
            student.course = n;
            double m = input_check("Средний балл: ", 0.0, 10.0);
            student.performance = m;
        }

        students.push_back(student);
    }
    file.close();

    ofstream outFile(filename);
    for (const Student& student : students) {
        outFile << student.fio << "," << student.age << "," << student.gender << ","
            << student.course << "," << student.performance << endl; }

    if (check_fio) { cout << "Запись обновлена!\n"; }
    else { cout << "Студент \"" << nameForRedact << "\" не найден!\n"; }
}
// Формирование файла с отличниками (GPA от 9.0 до 10.0)
void createfileTopStudents(const string& inputFile, const string& outputFile, int nCourse) {
    ifstream file(inputFile);
    ofstream outFile(outputFile);

    if (!file || !outFile) {
        cout << "Ошибка: файл не найден!" << endl;
        return;
    }

    string line;
    bool hasTopStudents = false;

    while (getline(file, line)) {
        stringstream ss(line);
        Student student;
        getline(ss, student.fio, ',');
        ss >> student.age;
        ss.ignore();
        getline(ss, student.gender, ',');
        ss >> student.course;
        ss.ignore();
        ss >> student.performance;

        if (student.course == nCourse && student.performance >= 9.0) {
            outFile << student.fio << "," << student.age << "," << student.gender << ","
                << student.course << "," << student.performance << endl;
            hasTopStudents = true;
        }
    }

    if (hasTopStudents) { cout << "Файл \"" << outputFile << "\" с отличниками создан!\n\n"; }
    else { cout << "На " << nCourse << " курсе нет отличников.\n\n"; }
}
// Меню для 2 задачи
void menu2(const string& filename) {
    int choice;
    while (true) {
        cout << "Меню:\n";
        cout << "1. Просмотр базы студентов\n";
        cout << "2. Добавить студента\n";
        cout << "3. Удалить студента\n";
        cout << "4. Редактировать студента\n";
        cout << "5. Создать файл отличников\n";
        cout << "0. Выход\n";
        int choice = input_check("Выберите действие: ", 0, 5);

        switch (choice) {
        case 1: 
            viewFile(filename); 
            break;
        case 2: 
            addStudent(filename); 
            break;
        case 3: 
            deleteStudent(filename); 
            break;
        case 4: 
            redactStudent(filename); 
            break;
        case 5: 
            int course; 
            cout << "Введите курс: ";
            cin >> course; 
            createfileTopStudents(filename, "top_students.txt", course); 
            break;
        case 0: return;
        }
    }
}
// Задание 3

// Меню
void menu() {

    string file_name = "Student_Database.txt";

    while (true) {
        cout << "   Задачи: \n";
        cout << "1. Формирование файла с чередующейся четностью чисел. \n";
        cout << "2. База данных о студентах. \n";
        cout << "3. Файл, хранящий фамилии студентов, которые решили правильно. \n";
        cout << "0. Выход из программы. \n\n";

        int n = input_check("Введите номер задачи: ", 0, 3);
        switch (n) {
        case 0:
            cout << "Завершение программы." << endl;
            return;
        case 1:
            parityNumbers("f.txt", "g.txt");
            break;
        case 2:
            createFile(file_name);
            menu2(file_name);
            cout << endl;
            break;
        case 3:
            break;
        }
    }
}

int main() {
    setlocale(LC_ALL, "Russian");
    SetConsoleCP(1251);
    SetConsoleOutputCP(1251);
    menu();
    return 0;
}
