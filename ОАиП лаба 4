#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <sstream>
#include <iomanip>
#include <windows.h>
#include <locale>
#include <filesystem>

using namespace std;
namespace fs = filesystem;

// обработчик ошибок
static int input_check(const string& message, int min, int max) {
    int input;
    string tmp;
    while (true) {
        cout << message;
        cin >> input;

        if (cin.fail()) {
            cin.clear();
            getline(cin, tmp);
            cout << "Ошибка ввода! Пожалуйста, введите число от " << min << " до " << max << "." << endl;
        }
        else {
            if (input < min || input > max) {
                cout << "Ошибка ввода! Пожалуйста, введите число от " << min << " до " << max << "." << endl;
                getline(cin, tmp);
                continue;
            }
            getline(cin, tmp);
            return input;
        }
    }
}
static double input_check(string message, double min, double max) {
    double input;
    while (true) {
        cout << message;
        cin >> input;

        if (cin.fail() || input < min || input > max) {
            cin.clear();
            cin.ignore(INT_MAX, '\n');
            cout << "Ошибка ввода! Пожалуйста, введите число от " << min << " до " << max << "." << endl;
        }
        else {
            return input;
        }
    }
}

// Задание 1
// Функция записи данных в файл
void createFile(const string& fileName, bool isBinary) {
    ofstream file_out;
    if (isBinary) {
        file_out.open(fileName, ios::binary);
    }
    else {
        file_out.open(fileName);
    }

    if (!file_out.is_open()) {
        cerr << "Ошибка: не удалось создать файл \"" << fileName << "\"!" << endl;
        return;
    }

    cout << "Введите числа для записи в файл \"" << fileName << "\" через пробел, затем нажмите Enter:" << endl;

    string input;
    getline(cin, input); // Читаем всю строку, введённую пользователем

    stringstream ss(input); // Преобразуем строку в поток
    int num;
    while (ss >> num) { // Читаем числа из потока
        if (isBinary) {
            file_out.write(reinterpret_cast<const char*>(&num), sizeof(num));
        }
        else {
            file_out << num << " ";
        }
    }

    file_out.close();
    cout << "Файл \"" << fileName << "\" успешно создан.\n" << endl;
}

// Проверка существования файла
static bool checkFile(const string& inputFile, bool isBinary) {
    ifstream file_in;
    if (isBinary) {
        file_in.open(inputFile, ios::binary);
    }
    else {
        file_in.open(inputFile);
    }

    if (!file_in.is_open()) {
        cerr << "Ошибка: файл \"" << inputFile << "\" не найден.\n\n";
        return false;
    }

    if (file_in.peek() == EOF) {
        cerr << "Ошибка: файл \"" << inputFile << "\" пуст.\n\n";
        return false;
    }

    file_in.close();
    return true;
}

// Основная функция обработки файла
void parityNumbers(const string& inputFile, const string& outputFile, bool isBinary) {
    if (!checkFile(inputFile, isBinary)) return;

    ifstream file_in;
    ofstream file_out;

    if (isBinary) {
        file_in.open(inputFile, ios::binary);
        file_out.open(outputFile, ios::binary);
    }
    else {
        file_in.open(inputFile);
        file_out.open(outputFile);
    }

    vector<int> numbers, chet, nechet;
    int num;

    cout << "Содержимое файла \"" << inputFile << "\": ";
    if (isBinary) {
        while (file_in.read(reinterpret_cast<char*>(&num), sizeof(num))) {
            cout << num << " ";
            numbers.push_back(num);
            (num % 2 == 0 ? chet : nechet).push_back(num);
        }
    }
    else {
        while (file_in >> num) {
            cout << num << " ";
            numbers.push_back(num);
            (num % 2 == 0 ? chet : nechet).push_back(num);
        }
    }
    cout << endl;

    file_in.close();

    vector<int> result;
    size_t chetIndex = 0, nechetIndex = 0;
    bool insertChet = !numbers.empty() && numbers[0] % 2 == 0;

    while (chetIndex < chet.size() || nechetIndex < nechet.size()) {
        if (insertChet && chetIndex < chet.size()) {
            result.push_back(chet[chetIndex++]);
            insertChet = false;
        }
        else if (!insertChet && nechetIndex < nechet.size()) {
            result.push_back(nechet[nechetIndex++]);
            insertChet = true;
        }
        else if (chetIndex < chet.size()) {
            result.push_back(chet[chetIndex++]);
        }
        else if (nechetIndex < nechet.size()) {
            result.push_back(nechet[nechetIndex++]);
        }
    }

    if (isBinary) {
        for (int r : result) {
            file_out.write(reinterpret_cast<const char*>(&r), sizeof(r));
        }
    }
    else {
        for (int r : result) {
            file_out << r << " ";
        }
    }

    file_out.close();

    cout << "Файл \"" << outputFile << "\" успешно создан." << endl;

    ifstream checkFile(outputFile, isBinary ? ios::binary : ios::in);

    cout << "Содержимое файла \"" << outputFile << "\": ";
    if (isBinary) {
        while (checkFile.read(reinterpret_cast<char*>(&num), sizeof(num))) {
            cout << num << " ";
        }
    }
    else {
        while (checkFile >> num) {
            cout << num << " ";
        }
    }

    checkFile.close();
    cout << endl;

// Задание 2
struct Student {
    string fio = "";              // ФИО
    int age = 0;                 // возраст
    string gender = "";         // пол
    int course = 0;            // курс
    double performance = 0.0; // успеваемость (общая средняя оценка)
};
// Создание файла (если он не существует)
static void createFile(const string& filename) {
    ifstream checkFile(filename);
    if (checkFile) return;

    ofstream file(filename);
    if (!file) {
        cout << "Ошибка: не удалось создать файл!" << endl;
        return;
    }

    cout << "Файл \"" << filename << "\" успешно создан!" << endl;
}
// Просмотр содержимого файла в виде таблицы
static void viewFile(const string& filename) {
    ifstream file(filename);
    if (!file) {
        cout << "Ошибка: файл \"" << filename << "\" не найден!" << endl;
        return;
    }

    cout << "\nСписок студентов:\n";
    cout << "-----------------------------------------------------------------------------------\n";
    cout << setw(40) << left << "ФИО"
        << setw(10) << left << "Возраст"
        << setw(10) << left << "Пол"
        << setw(10) << left << "Курс"
        << setw(10) << left << "Успеваемость\n";
    cout << "-----------------------------------------------------------------------------------\n";

    string line;
    while (getline(file, line)) {
        stringstream ss(line);
        Student student;
        getline(ss, student.fio, ',');
        ss >> student.age;
        ss.ignore();
        getline(ss, student.gender, ',');
        ss >> student.course;
        ss.ignore();
        ss >> student.performance;

        cout << setw(40) << left << student.fio
            << setw(10) << left << student.age
            << setw(10) << left << student.gender
            << setw(10) << left << student.course
            << setw(10) << fixed << setprecision(2) << student.performance
            << endl;
    }
    cout << endl;
}
// Добавление студента
static void addStudent(const string& filename) {
    ofstream file(filename, ios::app);
    if (!file) {
        cout << "Ошибка: файл \"" << filename << "\" не найден!" << endl;
        return;
    }

    Student student;
    cout << "Введите ФИО: ";
    getline(cin, student.fio);
    int n = input_check("Введите возраст: ", 17, 100);
    student.age = n;
    cout << "Введите пол (М/Ж): ";
    getline(cin, student.gender);
    n = input_check("Введите курс: ", 1, 6);
    student.course = n;
    double m = input_check("Введите средний балл: ", 0.0, 10.0);
    student.performance = m;

    file << student.fio << "," << student.age << "," << student.gender << ","
        << student.course << "," << student.performance << endl;

    cout << "Запись добавлена!\n\n";
}
// Удаление студента по ФИО
static void deleteStudent(const string& filename) {
    ifstream file(filename);
    if (!file) {
        cout << "Ошибка: файл \"" << filename << "\" не найден!" << endl;
        return;
    }

    vector<Student> students;
    string nameToDelete;
    cout << "Введите ФИО студента для удаления: ";
    cin.ignore();
    getline(cin, nameToDelete);

    string line;
    bool check_fio = false;
    while (getline(file, line)) {
        stringstream ss(line);
        Student student;
        getline(ss, student.fio, ',');
        ss >> student.age;
        ss.ignore();
        getline(ss, student.gender, ',');
        ss >> student.course;
        ss.ignore();
        ss >> student.performance;

        if (student.fio != nameToDelete) {
            students.push_back(student);
        }
        else { check_fio = true; }
    }
    file.close();

    if (!check_fio) {
        cout << "Студент с ФИО \"" << nameToDelete << "\" не найден!\n\n";
        return;
    }

    ofstream outFile(filename);
    for (const Student& student : students) {
        outFile << student.fio << "," << student.age << "," << student.gender << ","
            << student.course << "," << student.performance << endl;
    }

    cout << "Студент \"" << nameToDelete << "\" удален!\n\n";
}
// Редактор данных студента
static void redactStudent(const string& filename) {
    ifstream file(filename);
    if (!file) {
        cout << "Ошибка: файл \"" << filename << "\" не найден!" << endl;
        return;
    }

    vector<Student> students;
    string nameForRedact;
    cout << "Введите ФИО студента для корректировки: ";
    cin.ignore();
    getline(cin, nameForRedact);

    string line;
    bool check_fio = false;
    while (getline(file, line)) {
        stringstream ss(line);
        Student student;
        getline(ss, student.fio, ',');
        if (student.fio == nameForRedact) {
            check_fio = true;
            cout << "Введите новые данные для студента \"" << student.fio << "\":\n";
            int n = input_check("Возраст: ", 17, 100);
            student.age = n;
            cout << "Введите пол (М/Ж): ";
            getline(cin, student.gender);
            n = input_check("Курс: ", 1, 6);
            student.course = n;
            double m = input_check("Средний балл: ", 0.0, 10.0);
            student.performance = m;
        }
        else {
            ss >> student.age;
            ss.ignore();
            getline(ss, student.gender, ',');
            ss >> student.course;
            ss.ignore();
            ss >> student.performance;
        }

        students.push_back(student);
    }
    file.close();

    if (check_fio) {
        cout << "Запись обновлена!\n";
    }
    else {
        cout << "Студент \"" << nameForRedact << "\" не найден!\n";
        return;
    }

    ofstream outFile(filename);
    for (const Student& student : students) {
        outFile << student.fio << "," << student.age << "," << student.gender << ","
            << student.course << "," << student.performance << endl;
    }
}
// Формирование файла с отличниками (GPA от 9.0 до 10.0)
static void createfileTopStudents(const string& inputFile, const string& outputFile, int nCourse) {
    ifstream file(inputFile);
    ofstream outFile(outputFile);
    if (!file || !outFile) {
        cout << "Ошибка: файл не найден!" << endl;
        return;
    }

    string line;
    bool hasTopStudents = false;

    while (getline(file, line)) {
        stringstream ss(line);
        Student student;
        getline(ss, student.fio, ',');
        ss >> student.age;
        ss.ignore();
        getline(ss, student.gender, ',');
        ss >> student.course;
        ss.ignore();
        ss >> student.performance;

        if (student.course == nCourse && student.performance >= 9.0) {
            outFile << student.fio << "," << student.age << "," << student.gender << ","
                << student.course << "," << student.performance << endl;
            hasTopStudents = true;
        }
    }

    if (hasTopStudents) { cout << "Файл \"" << outputFile << "\" с отличниками создан!\n\n"; }
    else { cout << "На " << nCourse << " курсе нет отличников.\n\n"; }
}
// Меню для 2 задачи
static void menu2(const string& filename) {
    int choice;
    while (true) {
        cout << "Меню:\n";
        cout << "1. Просмотр базы студентов\n";
        cout << "2. Добавить студента\n";
        cout << "3. Удалить студента\n";
        cout << "4. Редактировать студента\n";
        cout << "5. Создать файл отличников\n";
        cout << "0. Выход\n";
        int choice = input_check("Выберите действие: ", 0, 5);

        switch (choice) {
        case 1:
            viewFile(filename);
            break;
        case 2:
            addStudent(filename);
            break;
        case 3:
            deleteStudent(filename);
            break;
        case 4:
            redactStudent(filename);
            break;
        case 5:
            int course;
            cout << "Введите курс: ";
            cin >> course;
            createfileTopStudents(filename, "Best students.txt", course);
            break;
        case 0: return;
        }
    }
}

// Задание 3
void task3() {
    string adresPapki;
    cout << "Введите путь к папке (например, C:\\Users\\user\\source\\repos): ";
    getline(cin, adresPapki);

    // проверка на наличие пути и папки
    if (!fs::exists(adresPapki) || !fs::is_directory(adresPapki)) {
        cout << "Указанной папки не существует!\n\n";
        return;
    }

    // Чтение правильной матрицы из output.txt
    string output_file_Adres = adresPapki + "\\output.txt";
    ifstream outputFile(output_file_Adres);

    if (!outputFile) {
        cout << "Ошибка: файл output.txt не найден в папке!\n\n";
        return;
    }

    int rowsCorrect, colsCorrect;
    outputFile >> rowsCorrect >> colsCorrect;
    outputFile.ignore();

    vector<vector<int>> Matrix(rowsCorrect, vector<int>(colsCorrect));
    for (int i = 0; i < rowsCorrect && outputFile; i++) {
        for (int j = 0; j < colsCorrect; j++) {
            if (!(outputFile >> Matrix[i][j])) {
                cout << "Ошибка: некорректные данные в output.txt!\n\n";
                return;
            }
        }
        outputFile.ignore();
    }
    outputFile.close();

    // Чтение матриц студентов и сравнение
    vector<string> completetaskStudents;
    for (const auto& entry : fs::directory_iterator(adresPapki)) {
        if (entry.path().extension() == ".txt" && entry.path().filename() != "output.txt" && entry.path().filename() != "results.txt") {
            ifstream file(entry.path());
            if (!file) continue; // Пропускаем, если не удалось открыть файл

            string fio;
            int rows, cols;
            getline(file, fio);
            file >> rows >> cols;
            file.ignore();

            if (rows != rowsCorrect || cols != colsCorrect) {
                file.close();
                continue; // Пропускаем, если размеры не совпадают
            }

            vector<vector<int>> matrix(rows, vector<int>(cols));
            bool check_good = true;
            for (int i = 0; i < rows && file; i++) {
                for (int j = 0; j < cols; j++) {
                    if (!(file >> matrix[i][j])) {
                        check_good = false;
                        break;
                    }
                }
                if (!check_good) break;
                file.ignore();
            }

            if (check_good) {
                bool complete = true;
                for (int i = 0; i < rows; i++) {
                    for (int j = 0; j < cols; j++) {
                        if (matrix[i][j] != Matrix[i][j]) {
                            complete = false;
                            break;
                        }
                    }
                    if (!complete) break;
                }
                if (complete) {
                    completetaskStudents.push_back(fio);
                }
            }
            file.close();
        }
    }

    // Запись результатов
    ofstream outFile(adresPapki + "\\results.txt");
    if (!outFile) {
        cout << "Ошибка: не удалось создать файл results.txt!\n\n";
        return;
    }

    bool hasComplete = false;
    for (const string& fio : completetaskStudents) {
        outFile << fio << endl;
        hasComplete = true;
    }

    if (hasComplete) { cout << "Файл results.txt создан с фамилиями студентов, успешно решивших задачу.\n\n"; }
    else { cout << "Ни один студент не решил задачу корректно.\n\n"; }
}

// Меню
void menu() {
    string fileType, inputFile, outputFile;
    bool isBinary;
    string userInput, file_name;

    while (true) {
        cout << "   Задачи: \n";
        cout << "1. Формирование файла с чередующейся четностью чисел. \n";
        cout << "2. База данных о студентах. \n";
        cout << "3. Файл, хранящий фамилии студентов, которые решили правильно. \n";
        cout << "0. Выход из программы. \n\n";

        int n = input_check("Введите номер задачи: ", 0, 3);
        switch (n) {
        case 0:
            cout << "Завершение программы." << endl;
            return;
        case 1:
            while (true) {
                cout << "Выберите тип файла (txt/bin): ";
                cin >> fileType;
                cin.ignore();

                if (fileType == "txt") {
                    isBinary = false;
                    inputFile = "f.txt";
                    outputFile = "g.txt";
                    break;
                }
                else if (fileType == "bin") {
                    isBinary = true;
                    inputFile = "f.bin";
                    outputFile = "g.bin";
                    break;
                }
                else {
                    cout << "Ошибка: введите 'txt' или 'bin'.\n";
                }
            }

            createFile(inputFile, isBinary);
            parityNumbers(inputFile, outputFile, isBinary);
            break;
        case 2:
            cout << "Введите имя файла (без .txt): ";
            cin >> userInput;
            file_name = userInput + ".txt";
            createFile(file_name);
            menu2(file_name);
            cout << endl;
            break;
        case 3:
            task3();
            break;
        }
    }
}

int main() {
    SetConsoleCP(1251);
    SetConsoleOutputCP(1251);
    setlocale(LC_ALL, "Russian");
    menu();
    return 0;
}
