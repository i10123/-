.model small
.386
.stack 400h
.data
    len equ 10
    Array dd 0, 3, 6, 0, 7, 0, 1, 2, 100, 6  ; Массив из 32-битных чисел
    sum dd 0                                  ; Переменная для хранения суммы
    sign db ?                                 ; Переменная для знака
    count db ?                                ; Переменная для счетчика
.code
start:
    mov ax, @data
    mov ds, ax

    mov cx, len                               ; Загружаем длину массива в CX
    xor si, si                                ; Обнуляем индекс массива (16-битный)
    xor eax, eax                              ; Обнуляем регистр для суммы (32-битный)
    jcxz exit                                 ; Если длина массива равна 0, выходим

cycl:
    ; Вычисляем адрес элемента массива
    mov bx, si                                ; Копируем индекс в BX
    shl bx, 2                                 ; Умножаем индекс на 4 (так как элементы массива 32-битные)
    mov ebx, Array[bx]                        ; Загружаем элемент массива в EBX (32-битный)
    cmp ebx, 0                                ; Проверяем, равен ли элемент нулю
    je skip_add                                ; Если равен нулю, пропускаем добавление
    add eax, ebx                              ; Добавляем элемент к сумме (32-битный)
skip_add:
    inc si                                    ; Увеличиваем индекс массива (16-битный)
    loop cycl                                  ; Повторяем цикл

    mov sum, eax                              ; Сохраняем сумму в переменную sum (32-битный)

    ; Вывод результата на экран
    mov eax, sum                              ; Загружаем сумму в EAX (32-битный)
    cmp eax, 0                                ; Проверяем, отрицательное ли число
    jge print_number                          ; Если не отрицательное, переходим к выводу
    neg eax                                   ; Иначе, меняем знак числа
    mov dl, '-'                               ; Выводим знак минус
    mov ah, 02h
    int 21h

print_number:
    xor cx, cx                                ; Обнуляем счетчик цифр (16-битный)
    mov ebx, 10                               ; Основание системы счисления (10)
convert_loop:
    xor edx, edx                              ; Обнуляем EDX перед делением (32-битный)
    div ebx                                   ; Делим EAX на 10 (32-битный)
    push dx                                   ; Сохраняем остаток (цифру) в стек (16-битный)
    inc cx                                    ; Увеличиваем счетчик цифр (16-битный)
    test eax, eax                             ; Проверяем, равно ли EAX нулю (32-битный)
    jnz convert_loop                          ; Если не равно, продолжаем цикл

print_loop:
    pop dx                                    ; Извлекаем цифру из стека (16-битный)
    add dl, '0'                               ; Преобразуем цифру в символ
    mov ah, 02h                               ; Функция вывода символа
    int 21h                                   ; Выводим символ
    loop print_loop                           ; Повторяем для всех цифр

exit:
    mov ax, 4C00h                             ; Завершение программы
    int 21h
end start
