#include <iostream>
#include <vector>
#include <string>
using namespace std;

template <typename T> // Сортировка включением (Эффективен для небольших массивов
                      // или массивов, которые почти отсортированы)
void insertionSort(vector<T>& arr, int& comparisons, int& swaps) {
    int n = arr.size();
    for (int i = 1; i < n; i++) {
        T key = arr[i];
        int j = i - 1;
        comparisons++;
        while (j >= 0 && arr[j] > key) {
            comparisons++;
            arr[j + 1] = arr[j];
            j--;
            swaps++;
        }
        arr[j + 1] = key;
        if (j == -1) {
            comparisons--;
        }
    }
}
template <typename T> // Сортировка выбором (Низкая эффективность на больших массивах.
                      // Число сравнений всегда остаётся высоким, даже если массив 
                      // уже частично отсортирован)
void selectionSort(vector<T>& arr, int& comparisons, int& swaps) {
    int n = arr.size();
    for (int i = 0; i < n - 1; i++) {
        int minIndex = i;
        for (int j = i + 1; j < n; j++) {
            comparisons++;
            if (arr[j] < arr[minIndex]) {
                minIndex = j;
            }
        }
        if (minIndex != i) {
            swap(arr[i], arr[minIndex]);
            swaps++;
        }
    }
}
template <typename T> // Шейкерная сортировка (Быстрее пузырьковой сортировки за
                      // счёт двустороннего прохода,медленный для больших массивов)
void shakerSort(vector<T>& arr, int& comparisons, int& swaps) {
    int n = arr.size();
    bool swapped = true;
    int left = 0, right = n - 1;
    while (swapped) {
        swapped = false;
        for (int i = left; i < right; i++) {
            comparisons++;
            if (arr[i] > arr[i + 1]) {
                swap(arr[i], arr[i + 1]);
                swaps++;
                swapped = true;
            }
        }
        if (!swapped) break; // Если нет перестановок, массив уже отсортирован
        swapped = false;
        right--;
        for (int i = right; i > left; i--) {
            comparisons++;
            if (arr[i] < arr[i - 1]) {
                swap(arr[i], arr[i - 1]);
                swaps++;
                swapped = true;
            }
        }
        left++;
    }
}

// Пирамидальная сортировка
template <typename T>
void heapify(vector<T>& arr, int n, int i, int& comparisons, int& swaps) {
    int largest = i;
    int l = 2 * i + 1;
    int r = 2 * i + 2;

    if (l < n) {
        comparisons++;
        if (arr[l] > arr[largest]) {
            largest = l;
        }
    }

    if (r < n) {
        comparisons++;
        if (arr[r] > arr[largest]) {
            largest = r;
        }
    }

    if (largest != i) {
        swap(arr[i], arr[largest]);
        swaps++;
        heapify(arr, n, largest, comparisons, swaps);
    }
}
template <typename T>
void heapSort(vector<T>& arr, int& comparisons, int& swaps) {
    int n = arr.size();
    for (int i = n / 2 - 1; i >= 0; i--) {
        heapify(arr, n, i, comparisons, swaps);
    }
    for (int i = n - 1; i > 0; i--) {
        swap(arr[0], arr[i]);
        swaps++;
        heapify(arr, i, 0, comparisons, swaps);
    }
}

template <typename T> // печать массива
void printArray(const vector<T>& arr) {
    for (const T& i : arr) {
        cout << i << " ";
    }
    cout << endl;
}
template <typename T> // типы сортировок
void typeSorting(vector<T>& originalArr, int& comparisons, int& swaps) {
    vector<T> arr;
    int sortChoice;

    do {
        cout << "\nВыберите тип сортировки:\n";
        cout << "0. Выход\n";
        cout << "1. Сортировка включением\n";
        cout << "2. Сортировка выбором\n";
        cout << "3. Шейкерная сортировка\n";
        cout << "4. Пирамидальная сортировка\n";
        cout << "Ваш выбор: ";
        cin >> sortChoice;

        if (sortChoice == 0) {
            cout << "Выход из сортировок.\n";
            break;
        }

        comparisons = 0;
        swaps = 0;
        arr = originalArr;

        switch (sortChoice) {
        case 1:
            insertionSort(arr, comparisons, swaps);
            break;
        case 2:
            selectionSort(arr, comparisons, swaps);
            break;
        case 3:
            shakerSort(arr, comparisons, swaps);
            break;
        case 4:
            heapSort(arr, comparisons, swaps);
            break;
        default:
            cout << "Неверный выбор типа сортировки." << endl;
            continue;
        }

        cout << "\nИсходный массив: ";
        printArray(originalArr);
        cout << "Отсортированный массив: ";
        printArray(arr);
        cout << "Количество сравнений: " << comparisons << "\n";
        cout << "Количество перестановок: " << swaps << "\n";

    } while (sortChoice != 0);
}
template <typename T> // ввод массива
void iputArray(int n, int& comparisons, int& swaps) {
    vector<T> arr(n);
    cout << "Введите элементы массива: \n";
for (int i = 0; i < n; i++) {
    while (true) {
        cout << "Элемент " << i + 1 << ": ";
        cin >> arr[i];
        
        if (cin.fail()) {
            cin.clear();
            cin.ignore(INT_MAX, '\n');
            cout << "Ошибка ввода. Попробуйте снова.\n";
        } else {
            cin.ignore(INT_MAX, '\n');
            break;
        }
    }
}
    typeSorting(arr, comparisons, swaps);
}

int main() {
    setlocale(LC_ALL, "RU");
    int n;
    while (true) {
        cout << "Введите количество элементов в массиве: ";
        cin >> n;
        if (n > 0) {
            break;
        }
        else {
            cin.clear();
            cin.ignore(INT_MAX, '\n');
            cout << "Ошибка. Попробуйте снова.\n";
        }
    }

    int typeChoice;
    while (true) {
        cout << "Выберите тип данных массива(0. Выход | 1. int | 2. char):\n";
        cout << "Ваш выбор: ";
        cin >> typeChoice;
        cin.ignore();
        int comparisons, swaps;

        switch (typeChoice) {
        case 0:
            cout << "Выход из программы.\n";
            return 0;
        case 1:
            iputArray<int>(n, comparisons, swaps);
            break;
        case 2:
            iputArray<char>(n, comparisons, swaps);
            break;
        default:
            cin.clear();
            cin.ignore(INT_MAX, '\n');
            cout << "Ошибка. Попробуйте снова.\n";
        }
    }

    return 0;
}
